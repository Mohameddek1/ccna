----------------------------------------------------------
Bridging workstations with GNS3 VM for ip connectivity
----------------------------------------------------------
- To **bridge workstations (real machines or VMs) with GNS3 devices** for **IP connectivity**, you need to **connect your physical or virtual workstation to your GNS3 topology using a cloud or NAT node**. Here's how to do it **step by step**:

---

## ✅ GOAL:

You want a **workstation (e.g., your real PC)** to **ping or connect to routers, firewalls, or switches inside GNS3**, and vice versa.

---

## 🧠 Concept Overview

You will:

* Use a **GNS3 Cloud** or **Host binding/NAT** node.
* Bridge it to your real PC’s **network interface**.
* Create a **GNS3 device (like a switch)** to connect to both **GNS3 devices and your workstation**.

---

## ⚙️ PREREQUISITES

1. **GNS3 VM installed** and running.
2. GNS3 is set to use **Remote server (GNS3 VM)**.
3. Your real PC is connected to a **working network (Ethernet/Wi-Fi)**.
4. **Admin/root permissions** (especially on Linux/macOS).

---

## 🛠 STEPS

### 🔗 1. Create or Open GNS3 Project

Start a project in GNS3.

---

### 🌐 2. Drag the **Cloud** node to the workspace

* This is how your **real PC or VM connects** to the GNS3 network.

---

### ⚙️ 3. Configure the Cloud

* Right-click the **Cloud node** > **Configure**.
* Under **Ethernet interfaces**, select the **real NIC** of your PC (e.g., `eth0`, `en0`, `Wi-Fi`, `Ethernet`, or `vmnet8` for VMs).
* Apply and close.

> 💡 If you use a **VM** (like Kali Linux or Windows), select the interface attached to your **host-only** or **bridged** adapter.

---

### 🔌 4. Add a GNS3 Switch

* Add a **GNS3 Ethernet switch**.
* Connect **your Cloud node** to this switch.
* Connect your **GNS3 routers/firewalls** to the switch too.

---

### 💻 5. Assign IP addresses

#### 🔹 In your GNS3 devices:

E.g., Router:

```bash
int f0/0
ip address 192.168.100.1 255.255.255.0
no shutdown
```

#### 🔹 On your real workstation:

Set IP manually (or use DHCP if you’ve set it up on router):

* IP: `192.168.100.10`
* Mask: `255.255.255.0`
* Gateway: `192.168.100.1` (router IP)

---

### 📡 6. Ping test

* From GNS3 device → `ping 192.168.100.10`
* From your PC → `ping 192.168.100.1`

If successful → IP connectivity is working ✅

---

## 🧪 Troubleshooting

* **Firewall** on host PC may block ICMP (ping).
* Use `sudo` on Linux to allow GNS3 to access real interfaces.
* On VMware/VirtualBox VMs: Use **Bridged or Host-only** NICs.
* In GNS3 VM settings, ensure **network is in Bridged mode** (not NAT unless you're doing PAT).

---

## ✅ Summary

| Component    | Use                          |
| ------------ | ---------------------------- |
| Cloud node   | Bridges GNS3 to real network |
| GNS3 Switch  | Connects multiple devices    |
| Real PC / VM | Acts as external workstation |
| IP config    | Must be in same subnet       |





=========================================================================
- Python script using **Netmiko** to configure a Cisco router (R1) to:

* ✅ Change hostname to `mohadek`
* ✅ Enable **EIGRP 100**
* ✅ Advertise `0.0.0.0` (all networks)
* ✅ Show `ip protocols`
* ✅ Show `version`

---

## 🐍 Python Script

```python
from netmiko import ConnectHandler

# Define device connection info
router = {
    'device_type': 'cisco_ios',
    'host': '192.168.1.1',        # Replace with your router IP
    'username': 'admin',          # Replace with your username
    'password': 'cisco123',       # Replace with your password
    'secret': 'cisco123',         # Enable password
}

# Establish SSH connection
net_connect = ConnectHandler(**router)

# Enter enable mode
net_connect.enable()

# Send configuration commands
config_commands = [
    'hostname mohadek',
    'router eigrp 100',
    'network 0.0.0.0',
    'no auto-summary'   # Optional but recommended in modern setups
]
output = net_connect.send_config_set(config_commands)
print("✅ Configuration Applied:\n", output)

# Show EIGRP protocols
output_protocols = net_connect.send_command("show ip protocols")
print("📡 EIGRP Protocol Info:\n", output_protocols)

# Show system version info
output_version = net_connect.send_command("show version")
print("🔧 Device Version Info:\n", output_version)

# Disconnect
net_connect.disconnect()
```



=======================================================================


======================================================================================
Here's a concise and practical overview of popular **Python libraries used for network automation and device configuration/backup**:

---

## 🛠️ 1. `telnetlib`

### 🔹 Description:

* Built-in Python library for **Telnet-based** connections.
* Suitable for older Cisco devices or environments where **Telnet is still used** (not recommended due to lack of encryption).

### 🔹 Use Case:

* Basic automation.
* Taking configuration backups or issuing commands on Telnet-enabled devices.

### 🔹 Limitations:

* **Not secure** (plaintext communication).
* No modern features like structured output parsing.

---

## 🔐 2. `paramiko`

### 🔹 Description:

* Python implementation of the **SSHv2 protocol**.
* Used for secure CLI access to network devices or Linux systems.

### 🔹 Use Case:

* Securely automate **device configurations** over SSH.
* Upload or download files (via SFTP).
* Good for **custom scripts** and **Linux server automation**.

### 🔹 Pros:

* Secure (SSH).
* Supports command execution and file transfer.

### 🔹 Limitations:

* Requires more scripting to handle interactive prompts (e.g., enable mode in Cisco).
* Doesn’t parse device output intelligently.

---

## ⚙️ 3. `netmiko`

### 🔹 Description:

* Built on top of `paramiko`.
* Tailored for **network devices** (Cisco, Juniper, etc.).
* Simplifies SSH connections and command execution on network gear.

### 🔹 Use Case:

* Running show/config commands on routers/switches/firewalls.
* Automated **backups**, **config pushes**, **status checks**.

### 🔹 Pros:

* Device-type aware.
* Easy to use for network engineers.
* Built-in delay handling.

### 🔹 Sample:

```python
from netmiko import ConnectHandler

device = {
    "device_type": "cisco_ios",
    "host": "192.168.1.1",
    "username": "admin",
    "password": "cisco",
}

net_connect = ConnectHandler(**device)
output = net_connect.send_command("show run")
print(output)
```

---

## 🤖 4. `napalm` (Network Automation and Programmability Abstraction Layer with Multivendor support)

### 🔹 Description:

* Multivendor automation library that provides a **standard interface** for interacting with network devices.

### 🔹 Use Case:

* Configuration management and **state retrieval**.
* Supports Cisco IOS, NX-OS, Juniper, Arista, etc.
* Read/compare/push configurations.

### 🔹 Pros:

* Consistent interface across vendors.
* Good for **idempotent automation**.

### 🔹 Limitations:

* Requires more setup and familiarity.

---

## 📦 5. `pyntc` (Python Network Test Control)

### 🔹 Description:

* Developed by NTClab (RedHat/Cisco).
* Simplifies interaction with Cisco and Arista devices.

### 🔹 Use Case:

* OS upgrades, file transfers, command execution.
* Works well for **automated testing** and **CI/CD pipelines**.

### 🔹 Pros:

* Simple syntax.
* Multivendor support.

---

## Summary Table:

| Tool        | Secure (SSH) | Best for                        | Notes                            |
| ----------- | ------------ | ------------------------------- | -------------------------------- |
| `telnetlib` | ❌            | Legacy Telnet scripts           | Built-in, not secure             |
| `paramiko`  | ✅            | General SSH access              | Low-level, flexible              |
| `netmiko`   | ✅            | Network automation              | Cisco-friendly, widely used      |
| `napalm`    | ✅            | Config/state mgmt (multivendor) | Consistent APIs, structured data |
| `pyntc`     | ✅            | OS upgrades, scripting          | Less popular, still effective    |



======================================================================================


==================================================================================
- **Python script** that configures **multiple routers** in one go using a `for` loop and **Netmiko**:

---

### ✅ **Requirements Met**

* EIGRP 300 enabled on all routers
* Advertise `0.0.0.0`
* `show ip protocols` and `show version` displayed per router
* Prompts only once for **credentials**, **no IP prompt**

---

## 🐍 Python Script (Multi-Router EIGRP Config)

```python
from netmiko import ConnectHandler
from getpass import getpass

# Ask for credentials ONCE
username = input("Enter SSH username: ")
password = getpass("Enter SSH password: ")
secret = getpass("Enter enable password: ")

# List of router IPs (edit accordingly)
router_ips = [
    '192.168.1.1',
    '192.168.1.2',
    '192.168.1.3'
]

# Configuration commands for EIGRP 300
config_commands = [
    'router eigrp 300',
    'network 0.0.0.0',
    'no auto-summary'
]

# Loop through each router IP
for ip in router_ips:
    print(f"\n🔄 Connecting to {ip}...")

    device = {
        'device_type': 'cisco_ios',
        'host': ip,
        'username': username,
        'password': password,
        'secret': secret,
    }

    try:
        connection = ConnectHandler(**device)
        connection.enable()

        print(f"✅ Connected to {ip}, applying configuration...")
        config_output = connection.send_config_set(config_commands)
        print(config_output)

        print(f"📡 EIGRP Protocols on {ip}:")
        print(connection.send_command("show ip protocols"))

        print(f"🔧 Version Info on {ip}:")
        print(connection.send_command("show version"))

        connection.disconnect()

    except Exception as e:
        print(f"❌ Failed to connect to {ip}: {e}")
```

---

### 🛠️ How to Use:

1. Install Netmiko if not already:

   ```bash
   pip install netmiko
   ```
2. Update the `router_ips` list with your routers’ IPs.
3. Run the script once — enter credentials only once.
4. All routers get configured with EIGRP 300.


===================================================================================



===================================================================================
- you can also configure a **Cisco switch using Telnet** in Python via the `telnetlib` library. Below is a basic example that shows how to:

---

## ✅ Use Case

* Connect to a Cisco switch using **Telnet**
* Change the hostname to `mohadek-switch`
* Create VLAN 10
* Display `show vlan brief` and `show version`

---

## 🖥️ Python Script Using `telnetlib`

```python
import telnetlib
import time

# 🔐 Credentials
host = input("Enter switch IP: ")
username = input("Username: ")
password = input("Password: ")
enable_password = input("Enable Password: ")

# ⏱ Delay function
def wait(sec=1):
    time.sleep(sec)

# 🔗 Connect via Telnet
tn = telnetlib.Telnet(host)
tn.read_until(b"Username: ")
tn.write(username.encode("ascii") + b"\n")
tn.read_until(b"Password: ")
tn.write(password.encode("ascii") + b"\n")

# 🔧 Enter enable mode
tn.write(b"enable\n")
tn.read_until(b"Password: ")
tn.write(enable_password.encode("ascii") + b"\n")

# 🛠 Configuration mode
tn.write(b"conf t\n")
tn.write(b"hostname mohadek-switch\n")
tn.write(b"vlan 10\n")
tn.write(b"name Users\n")
tn.write(b"exit\n")
tn.write(b"exit\n")

# 📊 Show commands
tn.write(b"show vlan brief\n")
wait(2)
output_vlan = tn.read_very_eager().decode("ascii")

tn.write(b"show version\n")
wait(2)
output_version = tn.read_very_eager().decode("ascii")

# 💾 Exit
tn.write(b"exit\n")

# 🖨️ Output results
print("\n📊 VLAN Summary:")
print(output_vlan)
print("\n📦 Version Info:")
print(output_version)
```

---

## 📌 Requirements

* Cisco switch with **Telnet** enabled
* Python 3.x
* No external libraries needed (telnetlib is built-in)

---

## ⚠️ Telnet Warning

> Telnet is **not secure**—it transmits data (including passwords) in plaintext.
> Use **SSH (Netmiko / Paramiko)** in production environments.



===================================================================================



===================================================================================
- A Python script that uses `telnetlib` to **configure multiple VLANs on a single Cisco switch using a `for` loop**.

---

## ✅ Goal

* Connect to a **single switch via Telnet**
* Create multiple VLANs (e.g., VLAN 10–14)
* Assign names to each VLAN
* Use a `for` loop to simplify the config

---

## 🧠 Example VLANs to Create

| VLAN ID | VLAN Name |
| ------- | --------- |
| 10      | Users     |
| 11      | Admin     |
| 12      | Guests    |
| 13      | Voice     |
| 14      | Servers   |

---

## 🖥️ Python Script

```python
import telnetlib
import time

# 📍 Switch IP Address
host = "192.168.1.10"  # Replace with your switch IP

# 🔐 Credentials
username = input("Username: ")
password = input("Password: ")
enable_password = input("Enable Password: ")

# 🧾 VLANs to configure
vlans = {
    10: "Users",
    11: "Admin",
    12: "Guests",
    13: "Voice",
    14: "Servers"
}

try:
    print(f"\n🔗 Connecting to Switch at {host}...\n")
    tn = telnetlib.Telnet(host)

    tn.read_until(b"Username: ")
    tn.write(username.encode("ascii") + b"\n")
    tn.read_until(b"Password: ")
    tn.write(password.encode("ascii") + b"\n")

    tn.write(b"enable\n")
    tn.read_until(b"Password: ")
    tn.write(enable_password.encode("ascii") + b"\n")

    tn.write(b"conf t\n")

    # 🔁 Loop through VLAN dictionary
    for vlan_id, vlan_name in vlans.items():
        tn.write(f"vlan {vlan_id}\n".encode("ascii"))
        tn.write(f"name {vlan_name}\n".encode("ascii"))
        tn.write(b"exit\n")
        print(f"✅ Configured VLAN {vlan_id} - {vlan_name}")

    tn.write(b"exit\n")
    tn.write(b"show vlan brief\n")
    time.sleep(1)
    output = tn.read_very_eager().decode("ascii")
    print("\n🧾 VLAN Configuration Summary:")
    print(output)

    tn.write(b"exit\n")
    tn.close()

except Exception as e:
    print(f"❌ Error: {e}")
```

---

## 📝 Notes

* This script uses **Telnet**. For **SSH**, consider using `Netmiko` for better security.
* Make sure Telnet is enabled on the switch.
* VLANs are named during creation using the loop for automation.


===================================================================================




====================================================================================
- Python script to **configure multiple VLANs across multiple Cisco switches using a `for` loop**, leveraging `telnetlib`.

---

## ✅ Goal

* Connect to **multiple Cisco switches**
* Create and name multiple VLANs on each
* Use loops to automate both **switch access** and **VLAN configuration**
* Prompt for credentials once

---

## 🧾 VLANs to Configure

```python
vlans = {
    10: "Users",
    20: "Admin",
    30: "Guests"
}
```

---

## 🧠 Sample Switch IPs

```python
switches = [
    "192.168.1.101",
    "192.168.1.102"
]
```

---

## 🖥️ Python Script Using `telnetlib`

```python
import telnetlib
import time

# 🔐 Prompt for credentials once
username = input("Enter username: ")
password = input("Enter password: ")
enable_password = input("Enter enable password: ")

# 🌐 List of switch IP addresses
switches = [
    "192.168.1.101",  # Replace with real IPs
    "192.168.1.102"
]

# 🧾 VLANs to create
vlans = {
    10: "Users",
    20: "Admin",
    30: "Guests"
}

for switch in switches:
    print(f"\n🔗 Connecting to switch: {switch}")
    try:
        tn = telnetlib.Telnet(switch, timeout=10)

        tn.read_until(b"Username: ")
        tn.write(username.encode("ascii") + b"\n")

        tn.read_until(b"Password: ")
        tn.write(password.encode("ascii") + b"\n")

        tn.write(b"enable\n")
        tn.read_until(b"Password: ")
        tn.write(enable_password.encode("ascii") + b"\n")

        tn.write(b"conf t\n")

        for vlan_id, vlan_name in vlans.items():
            tn.write(f"vlan {vlan_id}\n".encode("ascii"))
            tn.write(f"name {vlan_name}\n".encode("ascii"))
            tn.write(b"exit\n")
            print(f"✅ VLAN {vlan_id} ({vlan_name}) created on {switch}")

        tn.write(b"end\n")
        tn.write(b"show vlan brief\n")
        time.sleep(1)
        output = tn.read_very_eager().decode("ascii")
        print(f"\n📄 VLANs on {switch}:\n{output}")

        tn.write(b"exit\n")
        tn.close()

    except Exception as e:
        print(f"❌ Could not connect to {switch}: {e}")
```

---

## 🛑 Requirements

* Telnet must be **enabled on all switches**.
* Switches must be **reachable from your host**.
* You need **console/privileged access** to run config mode.

---

## 🔐 Want SSH Instead?

For security, I highly recommend using `Netmiko` with SSH instead of `telnetlib`.



====================================================================================



====================================================================================
- A python **scripts** for **configuring a Cisco ASA firewall using Python with Telnet** (via `telnetlib`). This includes:

---

## 📘 1. ⚠️ Important Notes Before Using Telnet

> ⚠️ **Telnet is insecure** because it transmits data in plain text. It's only recommended in lab environments. For production, always use SSH with tools like Netmiko.

---

## ✅ 2. What This Script Will Do

* Connect to Cisco ASA via Telnet
* Login with credentials
* Enter enable mode
* Configure:

  * Hostname
  * Interfaces (inside and outside)
  * NAT
  * Routing
* Save configuration
* Exit

---

## 🧾 3. Requirements

* Python 3.x
* Cisco ASA with Telnet enabled
* IP reachability to ASA
* Credentials (username/password)

---

## 🧑‍💻 4. Full Python Script Using `telnetlib`

```python
import telnetlib
import time

# -------------------------------
# 🔐 Device credentials & target
# -------------------------------
HOST = "192.168.1.1"         # 🔁 Change this to your ASA IP
username = "admin"
password = "admin123"
enable_password = "cisco"

# -------------------------------
# 🤖 Connect and Login
# -------------------------------
tn = telnetlib.Telnet(HOST)
tn.read_until(b"Username: ")
tn.write(username.encode("ascii") + b"\n")
tn.read_until(b"Password: ")
tn.write(password.encode("ascii") + b"\n")

# -------------------------------
# 🔑 Enable mode
# -------------------------------
tn.write(b"enable\n")
tn.read_until(b"Password: ")
tn.write(enable_password.encode("ascii") + b"\n")

# -------------------------------
# 🛠 Enter configuration mode
# -------------------------------
tn.write(b"conf t\n")

# -------------------------------
# 📦 Configuration commands
# -------------------------------
commands = [
    "hostname ASA-TELNET",
    "interface GigabitEthernet0/0",
    "nameif outside",
    "security-level 0",
    "ip address 192.168.100.1 255.255.255.0",
    "no shutdown",
    "exit",
    "interface GigabitEthernet0/1",
    "nameif inside",
    "security-level 100",
    "ip address 10.10.10.1 255.255.255.0",
    "no shutdown",
    "exit",
    "route outside 0.0.0.0 0.0.0.0 192.168.100.254",
    "exit",
    "wr mem"
]

for cmd in commands:
    tn.write(cmd.encode("ascii") + b"\n")
    time.sleep(1)  # wait between commands

# -------------------------------
# 💬 Optional: run show command
# -------------------------------
tn.write(b"show ip\n")
time.sleep(1)
output = tn.read_very_eager().decode("ascii")
print(output)

# -------------------------------
# 🔒 Exit session
# -------------------------------
tn.write(b"exit\n")
tn.close()
print("✅ Configuration completed and session closed.")
```

---

## 💡 5. Key Explanations

| Section              | What It Does                                      |
| -------------------- | ------------------------------------------------- |
| `telnetlib.Telnet()` | Connects to ASA via Telnet                        |
| `write()`            | Sends commands (needs newline `\n`)               |
| `read_until()`       | Waits for prompts like Username/Password          |
| `time.sleep()`       | Adds delay to let ASA process commands            |
| `wr mem`             | Saves configuration to memory                     |
| `show ip`            | Displays basic info (can replace with `show run`) |

---

## 📌 6. Example Output

```
ASA-TELNET# show ip
Interface IP Address OK? Method Status
Gi0/0 192.168.100.1 YES manual up
Gi0/1 10.10.10.1 YES manual up
...
```


=====================================================================================


=====================================================================================
- How to **take backups of multiple Cisco devices** (routers, switches, ASA firewalls, etc.) using Python.

We'll use the **`telnetlib`** module to connect, run `show running-config`, and **save the output to individual files**.

---

## ✅ Use Case

* You have **multiple Cisco devices**
* You want to **automatically back up their configs**
* You only want to enter credentials **once**
* Script connects via **Telnet**

---

## 📦 Requirements

* Python 3.x
* Telnet access enabled on devices
* Devices are reachable via IP
* Credentials (username, password, enable password)

---

## 🧑‍💻 Full Python Script: Backup Multiple Cisco Devices via Telnet

```python
import telnetlib
import time
from datetime import datetime

# ------------------------------
# 🔐 Credentials and IPs
# ------------------------------
username = input("Enter your Telnet username: ")
password = input("Enter your Telnet password: ")
enable_password = input("Enter your enable password: ")

# List of devices (replace with your actual IPs)
devices = [
    "192.168.1.1",
    "192.168.1.2",
    "192.168.1.3"
]

# Timestamp for backup filenames
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

# ------------------------------
# 🧠 Loop through devices
# ------------------------------
for ip in devices:
    try:
        print(f"\n🔌 Connecting to {ip}...")
        tn = telnetlib.Telnet(ip, timeout=10)

        tn.read_until(b"Username: ")
        tn.write(username.encode("ascii") + b"\n")

        tn.read_until(b"Password: ")
        tn.write(password.encode("ascii") + b"\n")

        tn.write(b"enable\n")
        tn.read_until(b"Password: ")
        tn.write(enable_password.encode("ascii") + b"\n")

        tn.write(b"terminal length 0\n")  # Disable paging
        tn.write(b"show running-config\n")
        time.sleep(3)  # Wait for command to complete

        output = tn.read_very_eager().decode("ascii")

        # Save to file
        filename = f"{ip}_backup_{timestamp}.txt"
        with open(filename, "w") as file:
            file.write(output)

        print(f"✅ Backup for {ip} saved as {filename}")
        tn.write(b"exit\n")
        tn.close()

    except Exception as e:
        print(f"❌ Failed to connect to {ip}: {e}")
```

---

## 📁 Output Example

If device IP is `192.168.1.1`, the script will create:

```
192.168.1.1_backup_20250522_142500.txt
```

Each file contains the full `show running-config` output.

---

## ✅ Benefits

* One-time credential entry
* Loops through any number of devices
* Creates separate files per device
* Reusable and customizable



======================================================================================


======================================================================================